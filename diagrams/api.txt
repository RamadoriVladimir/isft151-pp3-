Diseño de API 

Endpoints Implementados
Autenticación
1. Registro de Usuario
Endpoint: POST /auth/register
Descripción: Registra un nuevo usuario en el sistema.
Body (JSON):
json{
  "name": "string",        // o "username"
  "email": "string",
  "password": "string",
  "role": "string"         // opcional: 'user', 'admin', 'moderator' (default: 'user')
}

Respuestas:
201 Created - Éxito:
json{
  "message": "Usuario registrado con exito"
}
400 Bad Request - Email ya existe:
json{
  "message": "El email ya esta registrado"
}
400 Bad Request - Validación fallida:
json{
  "message": "La contraseña debe tener al menos 8 caracteres"
}

2. Login de Usuario
Endpoint: POST /auth/login
Descripción: Autentica un usuario y devuelve un token JWT.
Body (JSON):
json{
  "email": "string",
  "password": "string"
}
Respuestas:
200 OK - Éxito:
json{
  "message": "Login exitoso",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 1,
    "name": "Juan Pérez",
    "email": "juan@example.com",
    "role": "user",
    "creation_date": "2025-09-30T12:00:00.000Z"
  }
}
401 Unauthorized - Credenciales inválidas:
json{
  "message": "Credenciales invalidas"
}
500 Internal Server Error:
json{
  "message": "Error en login"
}

Endpoints Sugeridos (Basados en el Modelo de Datos)
Colecciones
3. Crear Colección
Endpoint: POST /collections
Autenticación: Requerida
Body (JSON):
json{
  "name": "string",
  "description": "string"
}
Respuesta 201:
json{
  "message": "Colección creada exitosamente",
  "collectionId": 1
}

4. Obtener Colecciones del Usuario
Endpoint: GET /collections
Autenticación: Requerida
Respuesta 200:
json{
  "collections": [
    {
      "id": 1,
      "name": "Mi Primera Colección",
      "description": "Descripción de la colección",
      "creation_date": "2025-09-30T12:00:00.000Z",
      "users_id": 1
    }
  ]
}

Moldes (Molds)
5. Crear Molde
Endpoint: POST /molds
Autenticación: Requerida (Admin/Moderator)
Body (JSON):
json{
  "name": "string",
  "type": "string",
  "width": 10.50,
  "height": 15.75
}
Respuesta 201:
json{
  "message": "Molde creado exitosamente",
  "moldId": 1
}

6. Listar Moldes
Endpoint: GET /molds
Autenticación: Requerida
Query Parameters:

type (opcional): Filtrar por tipo

Respuesta 200:
json{
  "molds": [
    {
      "id": 1,
      "name": "Molde Rectangular",
      "type": "rectangular",
      "width": 10.50,
      "height": 15.75,
      "creation_date": "2025-09-30T12:00:00.000Z"
    }
  ]
}

7. Asociar Molde a Colección
Endpoint: POST /collections/:collectionId/molds
Autenticación: Requerida
Body (JSON):
json{
  "moldId": 1,
  "key": "string"
}
Respuesta 201:
json{
  "message": "Molde agregado a la colección"
}

Borradores (Drafts)
8. Crear Borrador
Endpoint: POST /drafts
Autenticación: Requerida
Body (JSON):
json{
  "description": "string",
  "collectionId": 1
}
Respuesta 201:
json{
  "message": "Borrador creado exitosamente",
  "draftId": 1
}

9. Obtener Borradores del Usuario
Endpoint: GET /drafts
Autenticación: Requerida
Respuesta 200:
json{
  "drafts": [
    {
      "id": 1,
      "description": "Mi primer diseño",
      "creation_date": "2025-09-30T12:00:00.000Z",
      "users_id": 1,
      "collections_id": 1,
      "collection_name": "Mi Primera Colección"
    }
  ]
}

10. Obtener Detalle de Borrador
Endpoint: GET /drafts/:id
Autenticación: Requerida
Respuesta 200:
json{
  "draft": {
    "id": 1,
    "description": "Mi primer diseño",
    "creation_date": "2025-09-30T12:00:00.000Z",
    "collection_name": "Mi Primera Colección",
    "molds": [
      {
        "id": 1,
        "mold_name": "Molde Rectangular",
        "type": "rectangular",
        "width": 10.50,
        "height": 15.75,
        "position_x": 5.00,
        "position_y": 10.00,
        "rotation": 45.00,
        "scaling": 1.50
      }
    ]
  }
}

11. Agregar Molde a Borrador
Endpoint: POST /drafts/:id/molds
Autenticación: Requerida
Body (JSON):
json{
  "moldId": 1,
  "positionX": 5.00,
  "positionY": 10.00,
  "rotation": 45.00,
  "scaling": 1.50
}
Respuesta 201:
json{
  "message": "Molde agregado al borrador",
  "moldDraftId": 1
}

12. Actualizar Molde en Borrador
Endpoint: PUT /drafts/:draftId/molds/:moldDraftId
Autenticación: Requerida
Body (JSON):
json{
  "positionX": 7.00,
  "positionY": 12.00,
  "rotation": 90.00,
  "scaling": 2.00
}
Respuesta 200:
json{
  "message": "Molde actualizado exitosamente"
}

13. Eliminar Molde de Borrador
Endpoint: DELETE /drafts/:draftId/molds/:moldDraftId
Autenticación: Requerida
Respuesta 200:
json{
  "message": "Molde eliminado del borrador"
}

Modelo de Datos
Tablas

users

id (PK)
name
email (unique)
pass_hash
role (admin, user, moderator)
creation_date


collections

id (PK)
name
description
creation_date
users_id (FK)


molds

id (PK)
name
type
width
height
creation_date


molds_collections (tabla pivote)

collections_id (FK)
molds_id (FK)
key


drafts

id (PK)
description
creation_date
users_id (FK)
collections_id (FK)


molds_drafts

id (PK)
position_x
position_y
rotation
scaling
drafts_id (FK)
molds_id (FK)




Códigos de Estado HTTP

200 OK: Operación exitosa
201 Created: Recurso creado exitosamente
400 Bad Request: Datos inválidos o faltantes
401 Unauthorized: No autenticado o credenciales inválidas
403 Forbidden: No autorizado (permisos insuficientes)
404 Not Found: Recurso no encontrado
500 Internal Server Error: Error del servidor